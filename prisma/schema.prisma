// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Game {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User    @relation("UserCreatedGames", fields: [createdById], references: [id])
    createdById String
    against     User?   @relation("UserAgainstGames", fields: [againstId], references: [id])
    againstId   String?
    invite      Invite? @relation("gameInvite")
    rounds      Round[]

    // https://www.perplexity.ai/search/i-m-having-an-issue-adding-thi-XrgkNp3bQKmwXrATowGLuA#5
    @@index([name])
}

enum ThrowType {
    ROCK
    PAPER
    SCISSORS
}

model Round {
    id           String    @id @default(cuid())
    creatorThrew ThrowType
    againstThrew ThrowType
    game         Game      @relation(fields: [gameId], references: [id])
    gameId       Int
    winner       User?     @relation("RoundsWon", fields: [winnerId], references: [id])
    winnerId     String?

    createdAt   DateTime @default(now())
    createdBy   User     @relation("UserCreatorRounds", fields: [createdById], references: [id])
    createdById String
    against     User     @relation("UserAgainstRounds", fields: [againstId], references: [id])
    againstId   String
    User        User?    @relation(fields: [userId], references: [id])
    userId      String?
}

model Invite {
    id     String @id @default(cuid())
    game   Game?  @relation("gameInvite", fields: [gameId], references: [id])
    gameId Int    @unique
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdGames  Game[]    @relation("UserCreatedGames")
    againstGames  Game[]    @relation("UserAgainstGames")
    roundsCreated Round[]   @relation("UserCreatorRounds")
    roundsAgainst Round[]   @relation("UserAgainstRounds")

    Round     Round[]
    wonRounds Round[] @relation("RoundsWon")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
